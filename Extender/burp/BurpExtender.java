/*
	BurpExtender.java
	
	v0.5 (11/22/2016)
	
	SuperSerial-Active Scan check: Conduct active scan check that involves sending a request including a Java serialized object payload generated by ysoserial (>=0.0.3) 
	using various payload types (enabled/disabled in configuration menu) containing an operating system command (listed in configuration menu) to be executed on a target 
	system. Based on the inputted IScannerInsertionPoint parameter(s), either a) the base request will be converted to a POST request containing the payload in 
	plaintext in the message body (JBoss target systems), or b) the payload will be base64-encoded and inserted into the 
	appropriate request parameter(s) (WebSphere target systems). The operating system command included in the payload 
	will force the target system to (via HTTP) a) access the SuperSerial Node or Burp Collaborator, or b) upload a file to the SuperSerial Node or Burp Collaborator. 
	After submitting the payload to the target system, the Active Scanner will attempt to a) read the access entry from the SuperSerial node or Burp Collaborator, or 
	b) download the file that was uploaded by the target system. If this is successful, a new "Java Deserialization Remote Code Execution" Scan Issue will be created, 
	displaying details about the detection of the vulnerability and target system (web server platform and operating system), the request containing the successful payload, 
	and the SuperSerial Node or Burp Collaborator request and response containing the access entry or uploaded file.
	
	Currently supports target systems running the JBoss and WebSphere.
*/

package burp;

//standard includes
import java.awt.Component;

//project includes
import superserial.payload.SuperSerialPayloadGenerator;
import superserial.ui.SuperSerialConfigTab;
import superserial.settings.SuperSerialSettings;

public class BurpExtender implements IBurpExtender,ITab {
	//IBurpExtender fields
	private IBurpExtenderCallbacks callbacks;
	private IExtensionHelpers helpers;
	
	//Payload Generator fields
	private SuperSerialPayloadGenerator generator;
	
	//Config UI fields
	private SuperSerialConfigTab configTab;
	
	//Settings Fields
	private SuperSerialSettings settings;
	private PayloadCommandFactory pcf;
	private PayloadTypeFactory ptf;
	
	//constants
	private static final String VERSION = "0.5";
	private static final String disclaimer = "\nDisclaimer: This software is only intended to be used against systems the user explicitly owns or has authorization to test/attack. The developers provide the software for free without warranty, and assume no responsibility for any damage caused to systems by misusing the software. It is the responsibility of the user to abide by all local, state and federal laws while using the software.";
	
	//IBurpExtender methods
	@Override
	public void registerExtenderCallbacks(IBurpExtenderCallbacks cb) {
		callbacks = cb;
		helpers = callbacks.getHelpers();
		
		generator = SuperSerialPayloadGenerator.getInstance(callbacks);
		
		settings = SuperSerialSettings.getInstance(callbacks);
		pcf = PayloadCommandFactory.getInstance(callbacks);
		ptf = PayloadTypeFactory.getInstance(callbacks);
		
		callbacks.setExtensionName(settings.getTabCaption()+" v"+VERSION);
		callbacks.registerScannerCheck(new CollaboratorScannerCheck(callbacks));
		callbacks.registerScannerCheck(new NodeScannerCheck(callbacks));
		
		callbacks.registerScannerInsertionPointProvider(new SuperSerialInsertionPointProvider(callbacks));
		
		configTab = new SuperSerialConfigTab(callbacks);
		callbacks.customizeUiComponent(configTab);
		callbacks.addSuiteTab(this);
				
		//display "Node not configured" warning, and display disclaimer
		callbacks.printOutput("Node settings uninitialized, set in "+settings.getTabCaption()+"->\"Node Connection Settings\" tab and click \"Test Connection\"");
		callbacks.issueAlert("Node settings uninitialized, set in "+settings.getTabCaption()+"->\"Node Connection Settings\" tab and click \"Test Connection\"");
		callbacks.printOutput(disclaimer);
	}
	
	
	//ITab methods
	@Override
	public String getTabCaption() {
		return settings.getTabCaption();
	}
	
	@Override
	public Component getUiComponent() {
		return configTab;
	}
}
